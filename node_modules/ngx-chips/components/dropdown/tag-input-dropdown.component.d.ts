import { EventEmitter, Injector, QueryList, TemplateRef, AfterViewInit } from '@angular/core';
import { Observable } from 'rxjs';
import { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';
import { TagModel } from '../../core/accessor';
import { TagInputComponent } from '../tag-input/tag-input';
import * as ɵngcc0 from '@angular/core';
export declare class TagInputDropdown implements AfterViewInit {
    private readonly injector;
    /**
     * @name dropdown
     */
    dropdown: Ng2Dropdown;
    /**
     * @name menuTemplate
     * @desc reference to the template if provided by the user
     */
    templates: QueryList<TemplateRef<any>>;
    /**
     * @name offset
     */
    offset: string;
    /**
     * @name focusFirstElement
     */
    focusFirstElement: boolean;
    /**
     * - show autocomplete dropdown if the value of input is empty
     * @name showDropdownIfEmpty
     */
    showDropdownIfEmpty: boolean;
    /**
     * @description observable passed as input which populates the autocomplete items
     * @name autocompleteObservable
     */
    autocompleteObservable: (text: string) => Observable<any>;
    /**
     * - desc minimum text length in order to display the autocomplete dropdown
     * @name minimumTextLength
     */
    minimumTextLength: number;
    /**
     * - number of items to display in the autocomplete dropdown
     * @name limitItemsTo
     */
    limitItemsTo: number;
    /**
     * @name displayBy
     */
    displayBy: string;
    /**
     * @name identifyBy
     */
    identifyBy: string;
    /**
     * @description a function a developer can use to implement custom matching for the autocomplete
     * @name matchingFn
     */
    matchingFn: (value: string, target: TagModel) => boolean;
    /**
     * @name appendToBody
     */
    appendToBody: boolean;
    /**
     * @name keepOpen
     * @description option to leave dropdown open when adding a new item
     */
    keepOpen: boolean;
    /**
     * @name dynamicUpdate
     */
    dynamicUpdate: boolean;
    /**
     * @name zIndex
     */
    zIndex: number;
    /**
     * list of items that match the current value of the input (for autocomplete)
     * @name items
     */
    items: TagModel[];
    /**
     * @name tagInput
     */
    tagInput: TagInputComponent;
    /**
     * @name _autocompleteItems
     */
    private _autocompleteItems;
    /**
     * @name autocompleteItems
     * @param items
     */
    /**
    * @name autocompleteItems
    * @desc array of items that will populate the autocomplete
    */
    autocompleteItems: TagModel[];
    constructor(injector: Injector);
    /**
     * @name ngAfterviewInit
     */
    ngAfterViewInit(): void;
    /**
     * @name updatePosition
     */
    updatePosition(): void;
    /**
     * @name isVisible
     */
    readonly isVisible: boolean;
    /**
     * @name onHide
     */
    onHide(): EventEmitter<Ng2Dropdown>;
    /**
     * @name onItemClicked
     */
    onItemClicked(): EventEmitter<string>;
    /**
     * @name selectedItem
     */
    readonly selectedItem: Ng2MenuItem;
    /**
     * @name state
     */
    readonly state: any;
    /**
     *
     * @name show
     */
    show: () => void;
    /**
     * @name hide
     */
    hide(): void;
    /**
     * @name scrollListener
     */
    scrollListener(): void;
    /**
     * @name onWindowBlur
     */
    onWindowBlur(): void;
    /**
     * @name getFormValue
     */
    private getFormValue;
    /**
     * @name calculatePosition
     */
    private calculatePosition;
    /**
     * @name requestAdding
     * @param item {Ng2MenuItem}
     */
    private requestAdding;
    /**
     * @name createTagModel
     * @param item
     */
    private createTagModel;
    /**
     *
     * @param value {string}
     */
    private getMatchingItems;
    /**
     * @name setItems
     */
    private setItems;
    /**
     * @name resetItems
     */
    private resetItems;
    /**
     * @name populateItems
     * @param data
     */
    private populateItems;
    /**
     * @name getItemsFromObservable
     * @param text
     */
    private getItemsFromObservable;
    /**
     * @name setLoadingState
     * @param state
     */
    private setLoadingState;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagInputDropdown, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagInputDropdown, "tag-input-dropdown", never, { "offset": "offset"; "focusFirstElement": "focusFirstElement"; "showDropdownIfEmpty": "showDropdownIfEmpty"; "minimumTextLength": "minimumTextLength"; "limitItemsTo": "limitItemsTo"; "displayBy": "displayBy"; "identifyBy": "identifyBy"; "matchingFn": "matchingFn"; "appendToBody": "appendToBody"; "keepOpen": "keepOpen"; "dynamicUpdate": "dynamicUpdate"; "zIndex": "zIndex"; "autocompleteItems": "autocompleteItems"; "autocompleteObservable": "autocompleteObservable"; }, {}, ["templates"], never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWlucHV0LWRyb3Bkb3duLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWctaW5wdXQtZHJvcGRvd24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmcyRHJvcGRvd24sIE5nMk1lbnVJdGVtIH0gZnJvbSAnbmcyLW1hdGVyaWFsLWRyb3Bkb3duJztcbmltcG9ydCB7IFRhZ01vZGVsIH0gZnJvbSAnLi4vLi4vY29yZS9hY2Nlc3Nvcic7XG5pbXBvcnQgeyBUYWdJbnB1dENvbXBvbmVudCB9IGZyb20gJy4uL3RhZy1pbnB1dC90YWctaW5wdXQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVGFnSW5wdXREcm9wZG93biBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3I7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZHJvcGRvd25cbiAgICAgKi9cbiAgICBkcm9wZG93bjogTmcyRHJvcGRvd247XG4gICAgLyoqXG4gICAgICogQG5hbWUgbWVudVRlbXBsYXRlXG4gICAgICogQGRlc2MgcmVmZXJlbmNlIHRvIHRoZSB0ZW1wbGF0ZSBpZiBwcm92aWRlZCBieSB0aGUgdXNlclxuICAgICAqL1xuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PFRlbXBsYXRlUmVmPGFueT4+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9mZnNldFxuICAgICAqL1xuICAgIG9mZnNldDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGZvY3VzRmlyc3RFbGVtZW50XG4gICAgICovXG4gICAgZm9jdXNGaXJzdEVsZW1lbnQ6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogLSBzaG93IGF1dG9jb21wbGV0ZSBkcm9wZG93biBpZiB0aGUgdmFsdWUgb2YgaW5wdXQgaXMgZW1wdHlcbiAgICAgKiBAbmFtZSBzaG93RHJvcGRvd25JZkVtcHR5XG4gICAgICovXG4gICAgc2hvd0Ryb3Bkb3duSWZFbXB0eTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAZGVzY3JpcHRpb24gb2JzZXJ2YWJsZSBwYXNzZWQgYXMgaW5wdXQgd2hpY2ggcG9wdWxhdGVzIHRoZSBhdXRvY29tcGxldGUgaXRlbXNcbiAgICAgKiBAbmFtZSBhdXRvY29tcGxldGVPYnNlcnZhYmxlXG4gICAgICovXG4gICAgYXV0b2NvbXBsZXRlT2JzZXJ2YWJsZTogKHRleHQ6IHN0cmluZykgPT4gT2JzZXJ2YWJsZTxhbnk+O1xuICAgIC8qKlxuICAgICAqIC0gZGVzYyBtaW5pbXVtIHRleHQgbGVuZ3RoIGluIG9yZGVyIHRvIGRpc3BsYXkgdGhlIGF1dG9jb21wbGV0ZSBkcm9wZG93blxuICAgICAqIEBuYW1lIG1pbmltdW1UZXh0TGVuZ3RoXG4gICAgICovXG4gICAgbWluaW11bVRleHRMZW5ndGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiAtIG51bWJlciBvZiBpdGVtcyB0byBkaXNwbGF5IGluIHRoZSBhdXRvY29tcGxldGUgZHJvcGRvd25cbiAgICAgKiBAbmFtZSBsaW1pdEl0ZW1zVG9cbiAgICAgKi9cbiAgICBsaW1pdEl0ZW1zVG86IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBkaXNwbGF5QnlcbiAgICAgKi9cbiAgICBkaXNwbGF5Qnk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbmFtZSBpZGVudGlmeUJ5XG4gICAgICovXG4gICAgaWRlbnRpZnlCeTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBkZXNjcmlwdGlvbiBhIGZ1bmN0aW9uIGEgZGV2ZWxvcGVyIGNhbiB1c2UgdG8gaW1wbGVtZW50IGN1c3RvbSBtYXRjaGluZyBmb3IgdGhlIGF1dG9jb21wbGV0ZVxuICAgICAqIEBuYW1lIG1hdGNoaW5nRm5cbiAgICAgKi9cbiAgICBtYXRjaGluZ0ZuOiAodmFsdWU6IHN0cmluZywgdGFyZ2V0OiBUYWdNb2RlbCkgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBhcHBlbmRUb0JvZHlcbiAgICAgKi9cbiAgICBhcHBlbmRUb0JvZHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUga2VlcE9wZW5cbiAgICAgKiBAZGVzY3JpcHRpb24gb3B0aW9uIHRvIGxlYXZlIGRyb3Bkb3duIG9wZW4gd2hlbiBhZGRpbmcgYSBuZXcgaXRlbVxuICAgICAqL1xuICAgIGtlZXBPcGVuOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGR5bmFtaWNVcGRhdGVcbiAgICAgKi9cbiAgICBkeW5hbWljVXBkYXRlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHpJbmRleFxuICAgICAqL1xuICAgIHpJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIGxpc3Qgb2YgaXRlbXMgdGhhdCBtYXRjaCB0aGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgaW5wdXQgKGZvciBhdXRvY29tcGxldGUpXG4gICAgICogQG5hbWUgaXRlbXNcbiAgICAgKi9cbiAgICBpdGVtczogVGFnTW9kZWxbXTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSB0YWdJbnB1dFxuICAgICAqL1xuICAgIHRhZ0lucHV0OiBUYWdJbnB1dENvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBfYXV0b2NvbXBsZXRlSXRlbXNcbiAgICAgKi9cbiAgICBwcml2YXRlIF9hdXRvY29tcGxldGVJdGVtcztcbiAgICAvKipcbiAgICAgKiBAbmFtZSBhdXRvY29tcGxldGVJdGVtc1xuICAgICAqIEBwYXJhbSBpdGVtc1xuICAgICAqL1xuICAgIC8qKlxuICAgICogQG5hbWUgYXV0b2NvbXBsZXRlSXRlbXNcbiAgICAqIEBkZXNjIGFycmF5IG9mIGl0ZW1zIHRoYXQgd2lsbCBwb3B1bGF0ZSB0aGUgYXV0b2NvbXBsZXRlXG4gICAgKi9cbiAgICBhdXRvY29tcGxldGVJdGVtczogVGFnTW9kZWxbXTtcbiAgICBjb25zdHJ1Y3RvcihpbmplY3RvcjogSW5qZWN0b3IpO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG5nQWZ0ZXJ2aWV3SW5pdFxuICAgICAqL1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHVwZGF0ZVBvc2l0aW9uXG4gICAgICovXG4gICAgdXBkYXRlUG9zaXRpb24oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBpc1Zpc2libGVcbiAgICAgKi9cbiAgICByZWFkb25seSBpc1Zpc2libGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25IaWRlXG4gICAgICovXG4gICAgb25IaWRlKCk6IEV2ZW50RW1pdHRlcjxOZzJEcm9wZG93bj47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25JdGVtQ2xpY2tlZFxuICAgICAqL1xuICAgIG9uSXRlbUNsaWNrZWQoKTogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogQG5hbWUgc2VsZWN0ZWRJdGVtXG4gICAgICovXG4gICAgcmVhZG9ubHkgc2VsZWN0ZWRJdGVtOiBOZzJNZW51SXRlbTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBzdGF0ZVxuICAgICAqL1xuICAgIHJlYWRvbmx5IHN0YXRlOiBhbnk7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAbmFtZSBzaG93XG4gICAgICovXG4gICAgc2hvdzogKCkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBoaWRlXG4gICAgICovXG4gICAgaGlkZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHNjcm9sbExpc3RlbmVyXG4gICAgICovXG4gICAgc2Nyb2xsTGlzdGVuZXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvbldpbmRvd0JsdXJcbiAgICAgKi9cbiAgICBvbldpbmRvd0JsdXIoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBnZXRGb3JtVmFsdWVcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEZvcm1WYWx1ZTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBjYWxjdWxhdGVQb3NpdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgY2FsY3VsYXRlUG9zaXRpb247XG4gICAgLyoqXG4gICAgICogQG5hbWUgcmVxdWVzdEFkZGluZ1xuICAgICAqIEBwYXJhbSBpdGVtIHtOZzJNZW51SXRlbX1cbiAgICAgKi9cbiAgICBwcml2YXRlIHJlcXVlc3RBZGRpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgY3JlYXRlVGFnTW9kZWxcbiAgICAgKiBAcGFyYW0gaXRlbVxuICAgICAqL1xuICAgIHByaXZhdGUgY3JlYXRlVGFnTW9kZWw7XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdmFsdWUge3N0cmluZ31cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldE1hdGNoaW5nSXRlbXM7XG4gICAgLyoqXG4gICAgICogQG5hbWUgc2V0SXRlbXNcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldEl0ZW1zO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHJlc2V0SXRlbXNcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc2V0SXRlbXM7XG4gICAgLyoqXG4gICAgICogQG5hbWUgcG9wdWxhdGVJdGVtc1xuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICovXG4gICAgcHJpdmF0ZSBwb3B1bGF0ZUl0ZW1zO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGdldEl0ZW1zRnJvbU9ic2VydmFibGVcbiAgICAgKiBAcGFyYW0gdGV4dFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0SXRlbXNGcm9tT2JzZXJ2YWJsZTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBzZXRMb2FkaW5nU3RhdGVcbiAgICAgKiBAcGFyYW0gc3RhdGVcbiAgICAgKi9cbiAgICBwcml2YXRlIHNldExvYWRpbmdTdGF0ZTtcbn1cbiJdfQ==