import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class TagInputForm implements OnInit, OnChanges {
    /**
     * @name onSubmit
     */
    onSubmit: EventEmitter<any>;
    /**
     * @name onBlur
     */
    onBlur: EventEmitter<any>;
    /**
     * @name onFocus
     */
    onFocus: EventEmitter<any>;
    /**
     * @name onKeyup
     */
    onKeyup: EventEmitter<any>;
    /**
     * @name onKeydown
     */
    onKeydown: EventEmitter<any>;
    /**
     * @name inputTextChange
     */
    inputTextChange: EventEmitter<string>;
    /**
     * @name placeholder
     */
    placeholder: string;
    /**
     * @name validators
     */
    validators: ValidatorFn[];
    /**
     * @name asyncValidators
     * @desc array of AsyncValidator that are used to validate the tag before it gets appended to the list
     */
    asyncValidators: AsyncValidatorFn[];
    /**
     * @name inputId
     */
    inputId: string;
    /**
     * @name inputClass
     */
    inputClass: string;
    /**
     * @name tabindex
     * @desc pass through the specified tabindex to the input
     */
    tabindex: string;
    /**
     * @name disabled
     */
    disabled: boolean;
    /**
     * @name input
     */
    input: any;
    /**
     * @name form
     */
    form: FormGroup;
    /**
     * @name inputText
     */
    /**
    * @name inputText
    * @param text {string}
    */
    inputText: string;
    private readonly item;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * @name value
     */
    readonly value: FormControl;
    /**
     * @name isInputFocused
     */
    isInputFocused(): boolean;
    /**
     * @name getErrorMessages
     * @param messages
     */
    getErrorMessages(messages: {
        [key: string]: string;
    }): string[];
    /**
     * @name hasErrors
     */
    hasErrors(): boolean;
    /**
     * @name focus
     */
    focus(): void;
    /**
     * @name blur
     */
    blur(): void;
    /**
     * @name getElementPosition
     */
    getElementPosition(): ClientRect;
    /**
     * - removes input from the component
     * @name destroy
     */
    destroy(): void;
    /**
     * @name onKeyDown
     * @param $event
     */
    onKeyDown($event: any): void;
    /**
     * @name onKeyUp
     * @param $event
     */
    onKeyUp($event: any): void;
    /**
     * @name submit
     */
    submit($event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagInputForm, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagInputForm, "tag-input-form", never, { "validators": "validators"; "asyncValidators": "asyncValidators"; "tabindex": "tabindex"; "disabled": "disabled"; "inputText": "inputText"; "placeholder": "placeholder"; "inputId": "inputId"; "inputClass": "inputClass"; }, { "onSubmit": "onSubmit"; "onBlur": "onBlur"; "onFocus": "onFocus"; "onKeyup": "onKeyup"; "onKeydown": "onKeydown"; "inputTextChange": "inputTextChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLWlucHV0LWZvcm0uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRhZy1pbnB1dC1mb3JtLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXN5bmNWYWxpZGF0b3JGbiwgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9yRm4gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBUYWdJbnB1dEZvcm0gaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25TdWJtaXRcbiAgICAgKi9cbiAgICBvblN1Ym1pdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25CbHVyXG4gICAgICovXG4gICAgb25CbHVyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvbkZvY3VzXG4gICAgICovXG4gICAgb25Gb2N1czogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25LZXl1cFxuICAgICAqL1xuICAgIG9uS2V5dXA6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uS2V5ZG93blxuICAgICAqL1xuICAgIG9uS2V5ZG93bjogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICogQG5hbWUgaW5wdXRUZXh0Q2hhbmdlXG4gICAgICovXG4gICAgaW5wdXRUZXh0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBwbGFjZWhvbGRlclxuICAgICAqL1xuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgdmFsaWRhdG9yc1xuICAgICAqL1xuICAgIHZhbGlkYXRvcnM6IFZhbGlkYXRvckZuW107XG4gICAgLyoqXG4gICAgICogQG5hbWUgYXN5bmNWYWxpZGF0b3JzXG4gICAgICogQGRlc2MgYXJyYXkgb2YgQXN5bmNWYWxpZGF0b3IgdGhhdCBhcmUgdXNlZCB0byB2YWxpZGF0ZSB0aGUgdGFnIGJlZm9yZSBpdCBnZXRzIGFwcGVuZGVkIHRvIHRoZSBsaXN0XG4gICAgICovXG4gICAgYXN5bmNWYWxpZGF0b3JzOiBBc3luY1ZhbGlkYXRvckZuW107XG4gICAgLyoqXG4gICAgICogQG5hbWUgaW5wdXRJZFxuICAgICAqL1xuICAgIGlucHV0SWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbmFtZSBpbnB1dENsYXNzXG4gICAgICovXG4gICAgaW5wdXRDbGFzczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHRhYmluZGV4XG4gICAgICogQGRlc2MgcGFzcyB0aHJvdWdoIHRoZSBzcGVjaWZpZWQgdGFiaW5kZXggdG8gdGhlIGlucHV0XG4gICAgICovXG4gICAgdGFiaW5kZXg6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbmFtZSBkaXNhYmxlZFxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlucHV0XG4gICAgICovXG4gICAgaW5wdXQ6IGFueTtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBmb3JtXG4gICAgICovXG4gICAgZm9ybTogRm9ybUdyb3VwO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlucHV0VGV4dFxuICAgICAqL1xuICAgIC8qKlxuICAgICogQG5hbWUgaW5wdXRUZXh0XG4gICAgKiBAcGFyYW0gdGV4dCB7c3RyaW5nfVxuICAgICovXG4gICAgaW5wdXRUZXh0OiBzdHJpbmc7XG4gICAgcHJpdmF0ZSByZWFkb25seSBpdGVtO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgdmFsdWVcbiAgICAgKi9cbiAgICByZWFkb25seSB2YWx1ZTogRm9ybUNvbnRyb2w7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaXNJbnB1dEZvY3VzZWRcbiAgICAgKi9cbiAgICBpc0lucHV0Rm9jdXNlZCgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGdldEVycm9yTWVzc2FnZXNcbiAgICAgKiBAcGFyYW0gbWVzc2FnZXNcbiAgICAgKi9cbiAgICBnZXRFcnJvck1lc3NhZ2VzKG1lc3NhZ2VzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcbiAgICB9KTogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogQG5hbWUgaGFzRXJyb3JzXG4gICAgICovXG4gICAgaGFzRXJyb3JzKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgZm9jdXNcbiAgICAgKi9cbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGJsdXJcbiAgICAgKi9cbiAgICBibHVyKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0RWxlbWVudFBvc2l0aW9uXG4gICAgICovXG4gICAgZ2V0RWxlbWVudFBvc2l0aW9uKCk6IENsaWVudFJlY3Q7XG4gICAgLyoqXG4gICAgICogLSByZW1vdmVzIGlucHV0IGZyb20gdGhlIGNvbXBvbmVudFxuICAgICAqIEBuYW1lIGRlc3Ryb3lcbiAgICAgKi9cbiAgICBkZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25LZXlEb3duXG4gICAgICogQHBhcmFtICRldmVudFxuICAgICAqL1xuICAgIG9uS2V5RG93bigkZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25LZXlVcFxuICAgICAqIEBwYXJhbSAkZXZlbnRcbiAgICAgKi9cbiAgICBvbktleVVwKCRldmVudDogYW55KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBzdWJtaXRcbiAgICAgKi9cbiAgICBzdWJtaXQoJGV2ZW50OiBhbnkpOiB2b2lkO1xufVxuIl19