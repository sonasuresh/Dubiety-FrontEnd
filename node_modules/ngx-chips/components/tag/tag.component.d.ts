import { EventEmitter, TemplateRef, ElementRef, ChangeDetectorRef, Renderer2 } from '@angular/core';
import { TagModel } from '../../core/accessor';
import { TagRipple } from '../tag/tag-ripple.component';
import { EventLike } from '../../core/helpers/event-like';
import * as ɵngcc0 from '@angular/core';
export declare class TagComponent {
    element: ElementRef;
    renderer: Renderer2;
    private cdRef;
    /**
     * @name model {TagModel}
     */
    model: TagModel;
    /**
     * @name removable {boolean}
     */
    removable: boolean;
    /**
     * @name editable {boolean}
     */
    editable: boolean;
    /**
     * @name template {TemplateRef<any>}
     */
    template: TemplateRef<any>;
    /**
     * @name displayBy {string}
     */
    displayBy: string;
    /**
     * @name identifyBy {string}
     */
    identifyBy: string;
    /**
     * @name index {number}
     */
    index: number;
    /**
     * @name hasRipple
     */
    hasRipple: boolean;
    /**
     * @name disabled
     */
    disabled: boolean;
    /**
     * @name canAddTag
     */
    canAddTag: (tag: TagModel) => boolean;
    /**
     * @name onSelect
     */
    onSelect: EventEmitter<TagModel>;
    /**
     * @name onRemove
     */
    onRemove: EventEmitter<TagModel>;
    /**
     * @name onBlur
     */
    onBlur: EventEmitter<TagModel>;
    /**
     * @name onKeyDown
     */
    onKeyDown: EventEmitter<any>;
    /**
     * @name onTagEdited
     */
    onTagEdited: EventEmitter<TagModel>;
    /**
     * @name readonly {boolean}
     */
    readonly readonly: boolean;
    /**
     * @name editing
     */
    editing: boolean;
    /**
     * @name moving
     */
    moving: boolean;
    /**
     * @name rippleState
     */
    rippleState: string;
    /**
     * @name ripple {TagRipple}
     */
    ripple: TagRipple;
    constructor(element: ElementRef, renderer: Renderer2, cdRef: ChangeDetectorRef);
    /**
     * @name select
     */
    select($event?: MouseEvent): void;
    /**
     * @name remove
     */
    remove($event: MouseEvent): void;
    /**
     * @name focus
     */
    focus(): void;
    move(): void;
    /**
     * @name keydown
     * @param event
     */
    keydown(event: EventLike): void;
    /**
     * @name blink
     */
    blink(): void;
    /**
     * @name toggleEditMode
     */
    toggleEditMode(): void;
    /**
     * @name onBlurred
     * @param event
     */
    onBlurred(event: any): void;
    /**
     * @name getDisplayValue
     * @param item
     */
    getDisplayValue(item: TagModel): string;
    /**
     * @desc returns whether the ripple is visible or not
     * only works in Chrome
     * @name isRippleVisible
     */
    readonly isRippleVisible: boolean;
    /**
     * @name disableEditMode
     * @param $event
     */
    disableEditMode($event?: EventLike): void;
    /**
     * @name isDeleteIconVisible
     */
    isDeleteIconVisible(): boolean;
    /**
     * @name getContentEditableText
     */
    private getContentEditableText;
    /**
     * @name setContentEditableText
     * @param model
     */
    private setContentEditableText;
    /**
     * @name
     */
    private activateEditMode;
    /**
     * @name storeNewValue
     * @param input
     */
    private storeNewValue;
    /**
     * @name getContentEditable
     */
    private getContentEditable;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TagComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TagComponent, "tag", never, { "disabled": "disabled"; "model": "model"; "removable": "removable"; "editable": "editable"; "template": "template"; "displayBy": "displayBy"; "identifyBy": "identifyBy"; "index": "index"; "hasRipple": "hasRipple"; "canAddTag": "canAddTag"; }, { "onSelect": "onSelect"; "onRemove": "onRemove"; "onBlur": "onBlur"; "onKeyDown": "onKeyDown"; "onTagEdited": "onTagEdited"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJ0YWcuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3RvclJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUYWdNb2RlbCB9IGZyb20gJy4uLy4uL2NvcmUvYWNjZXNzb3InO1xuaW1wb3J0IHsgVGFnUmlwcGxlIH0gZnJvbSAnLi4vdGFnL3RhZy1yaXBwbGUuY29tcG9uZW50JztcbmltcG9ydCB7IEV2ZW50TGlrZSB9IGZyb20gJy4uLy4uL2NvcmUvaGVscGVycy9ldmVudC1saWtlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFRhZ0NvbXBvbmVudCB7XG4gICAgZWxlbWVudDogRWxlbWVudFJlZjtcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByaXZhdGUgY2RSZWY7XG4gICAgLyoqXG4gICAgICogQG5hbWUgbW9kZWwge1RhZ01vZGVsfVxuICAgICAqL1xuICAgIG1vZGVsOiBUYWdNb2RlbDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSByZW1vdmFibGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgcmVtb3ZhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGVkaXRhYmxlIHtib29sZWFufVxuICAgICAqL1xuICAgIGVkaXRhYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHRlbXBsYXRlIHtUZW1wbGF0ZVJlZjxhbnk+fVxuICAgICAqL1xuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGRpc3BsYXlCeSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGRpc3BsYXlCeTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlkZW50aWZ5Qnkge3N0cmluZ31cbiAgICAgKi9cbiAgICBpZGVudGlmeUJ5OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogQG5hbWUgaW5kZXgge251bWJlcn1cbiAgICAgKi9cbiAgICBpbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGhhc1JpcHBsZVxuICAgICAqL1xuICAgIGhhc1JpcHBsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBkaXNhYmxlZFxuICAgICAqL1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGNhbkFkZFRhZ1xuICAgICAqL1xuICAgIGNhbkFkZFRhZzogKHRhZzogVGFnTW9kZWwpID0+IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25TZWxlY3RcbiAgICAgKi9cbiAgICBvblNlbGVjdDogRXZlbnRFbWl0dGVyPFRhZ01vZGVsPjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvblJlbW92ZVxuICAgICAqL1xuICAgIG9uUmVtb3ZlOiBFdmVudEVtaXR0ZXI8VGFnTW9kZWw+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uQmx1clxuICAgICAqL1xuICAgIG9uQmx1cjogRXZlbnRFbWl0dGVyPFRhZ01vZGVsPjtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBvbktleURvd25cbiAgICAgKi9cbiAgICBvbktleURvd246IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIC8qKlxuICAgICAqIEBuYW1lIG9uVGFnRWRpdGVkXG4gICAgICovXG4gICAgb25UYWdFZGl0ZWQ6IEV2ZW50RW1pdHRlcjxUYWdNb2RlbD47XG4gICAgLyoqXG4gICAgICogQG5hbWUgcmVhZG9ubHkge2Jvb2xlYW59XG4gICAgICovXG4gICAgcmVhZG9ubHkgcmVhZG9ubHk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgZWRpdGluZ1xuICAgICAqL1xuICAgIGVkaXRpbmc6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgbW92aW5nXG4gICAgICovXG4gICAgbW92aW5nOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHJpcHBsZVN0YXRlXG4gICAgICovXG4gICAgcmlwcGxlU3RhdGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAbmFtZSByaXBwbGUge1RhZ1JpcHBsZX1cbiAgICAgKi9cbiAgICByaXBwbGU6IFRhZ1JpcHBsZTtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjZFJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHNlbGVjdFxuICAgICAqL1xuICAgIHNlbGVjdCgkZXZlbnQ/OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSByZW1vdmVcbiAgICAgKi9cbiAgICByZW1vdmUoJGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBmb2N1c1xuICAgICAqL1xuICAgIGZvY3VzKCk6IHZvaWQ7XG4gICAgbW92ZSgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGtleWRvd25cbiAgICAgKiBAcGFyYW0gZXZlbnRcbiAgICAgKi9cbiAgICBrZXlkb3duKGV2ZW50OiBFdmVudExpa2UpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGJsaW5rXG4gICAgICovXG4gICAgYmxpbmsoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSB0b2dnbGVFZGl0TW9kZVxuICAgICAqL1xuICAgIHRvZ2dsZUVkaXRNb2RlKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQG5hbWUgb25CbHVycmVkXG4gICAgICogQHBhcmFtIGV2ZW50XG4gICAgICovXG4gICAgb25CbHVycmVkKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGdldERpc3BsYXlWYWx1ZVxuICAgICAqIEBwYXJhbSBpdGVtXG4gICAgICovXG4gICAgZ2V0RGlzcGxheVZhbHVlKGl0ZW06IFRhZ01vZGVsKTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIEBkZXNjIHJldHVybnMgd2hldGhlciB0aGUgcmlwcGxlIGlzIHZpc2libGUgb3Igbm90XG4gICAgICogb25seSB3b3JrcyBpbiBDaHJvbWVcbiAgICAgKiBAbmFtZSBpc1JpcHBsZVZpc2libGVcbiAgICAgKi9cbiAgICByZWFkb25seSBpc1JpcHBsZVZpc2libGU6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgZGlzYWJsZUVkaXRNb2RlXG4gICAgICogQHBhcmFtICRldmVudFxuICAgICAqL1xuICAgIGRpc2FibGVFZGl0TW9kZSgkZXZlbnQ/OiBFdmVudExpa2UpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIGlzRGVsZXRlSWNvblZpc2libGVcbiAgICAgKi9cbiAgICBpc0RlbGV0ZUljb25WaXNpYmxlKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0Q29udGVudEVkaXRhYmxlVGV4dFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0Q29udGVudEVkaXRhYmxlVGV4dDtcbiAgICAvKipcbiAgICAgKiBAbmFtZSBzZXRDb250ZW50RWRpdGFibGVUZXh0XG4gICAgICogQHBhcmFtIG1vZGVsXG4gICAgICovXG4gICAgcHJpdmF0ZSBzZXRDb250ZW50RWRpdGFibGVUZXh0O1xuICAgIC8qKlxuICAgICAqIEBuYW1lXG4gICAgICovXG4gICAgcHJpdmF0ZSBhY3RpdmF0ZUVkaXRNb2RlO1xuICAgIC8qKlxuICAgICAqIEBuYW1lIHN0b3JlTmV3VmFsdWVcbiAgICAgKiBAcGFyYW0gaW5wdXRcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0b3JlTmV3VmFsdWU7XG4gICAgLyoqXG4gICAgICogQG5hbWUgZ2V0Q29udGVudEVkaXRhYmxlXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDb250ZW50RWRpdGFibGU7XG59XG4iXX0=